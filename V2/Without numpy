import matplotlib.pyplot as plt

def input_matrix_vector():
    n = int(input("Enter matrix dimension (2 or 3): "))
    if n not in [2, 3]:
        raise ValueError("Only 2x2 or 3x3 matrices are supported.")

    print(f"Enter the {n}x{n} matrix row by row (space separated):")
    A = [list(map(float, input(f"Row {i+1}: ").split())) for i in range(n)]

    print(f"Enter the {n}-element vector (space separated):")
    b = list(map(float, input("Vector b: ").split()))

    return A, b

def transpose_matrix(A):
    return [[A[j][i] for j in range(len(A))] for i in range(len(A[0]))]

def gaussian_elimination(A, b):
    n = len(b)
    for i in range(n):
        # Pivot
        max_row = max(range(i, n), key=lambda r: abs(A[r][i]))
        A[i], A[max_row] = A[max_row], A[i]
        b[i], b[max_row] = b[max_row], b[i]

        # Elimination
        for j in range(i+1, n):
            factor = A[j][i] / A[i][i]
            for k in range(i, n):
                A[j][k] -= factor * A[i][k]
            b[j] -= factor * b[i]

    # Back substitution
    x = [0] * n
    for i in range(n-1, -1, -1):
        sum_ax = sum(A[i][j]*x[j] for j in range(i+1, n))
        x[i] = (b[i] - sum_ax) / A[i][i]
    return x

def inverse_matrix(A):
    n = len(A)
    identity = [[float(i == j) for j in range(n)] for i in range(n)]
    AI = [row[:] + identity[i][:] for i, row in enumerate(A)]

    # Forward elimination
    for i in range(n):
        pivot = AI[i][i]
        if pivot == 0:
            for j in range(i+1, n):
                if AI[j][i] != 0:
                    AI[i], AI[j] = AI[j], AI[i]
                    break
        pivot = AI[i][i]
        for k in range(2*n):
            AI[i][k] /= pivot
        for j in range(n):
            if j != i:
                factor = AI[j][i]
                for k in range(2*n):
                    AI[j][k] -= factor * AI[i][k]

    inv = [row[n:] for row in AI]
    return inv

def matrix_vector_multiply(A, b):
    return [sum(A[i][j] * b[j] for j in range(len(b))) for i in range(len(A))]

def lu_decomposition(A):
    n = len(A)
    L = [[0]*n for _ in range(n)]
    U = [[0]*n for _ in range(n)]

    for i in range(n):
        L[i][i] = 1
        for j in range(i, n):
            U[i][j] = A[i][j] - sum(L[i][k]*U[k][j] for k in range(i))
        for j in range(i+1, n):
            L[j][i] = (A[j][i] - sum(L[j][k]*U[k][i] for k in range(i))) / U[i][i]

    return L, U

def visualize_2x2(A, b, solution):
    x_vals = [x * 0.1 for x in range(-100, 101)]
    y1 = [(b[0] - A[0][0]*x)/A[0][1] if A[0][1] != 0 else float('inf') for x in x_vals]
    y2 = [(b[1] - A[1][0]*x)/A[1][1] if A[1][1] != 0 else float('inf') for x in x_vals]

    plt.plot(x_vals, y1, label="Equation 1")
    plt.plot(x_vals, y2, label="Equation 2")
    plt.plot(solution[0], solution[1], 'ro', label="Solution")
    plt.xlabel("x")
    plt.ylabel("y")
    plt.title("2x2 System Visualization")
    plt.axhline(0, color="gray", linewidth=0.5)
    plt.axvline(0, color="gray", linewidth=0.5)
    plt.legend()
    plt.grid(True)
    plt.show()

def print_matrix(M, name):
    print(f"{name}:")
    for row in M:
        print(["{0:.2f}".format(val) for val in row])

def main():
    A, b = input_matrix_vector()

    print("\nMatrix A:")
    print_matrix(A, "A")

    print("\nVector b:", b)

    # Transpose
    A_T = transpose_matrix(A)
    print_matrix(A_T, "Transpose of A")

    # Gaussian Elimination
    x1 = gaussian_elimination([row[:] for row in A], b[:])
    print("\nSolution using Gaussian Elimination:", x1)

    # Inverse Matrix Method
    try:
        A_inv = inverse_matrix([row[:] for row in A])
        print_matrix(A_inv, "Inverse of A")
        x2 = matrix_vector_multiply(A_inv, b)
        print("Solution using Inverse Matrix:", x2)
    except Exception as e:
        print("Inverse method failed:", e)

    # LU Decomposition
    try:
        L, U = lu_decomposition([row[:] for row in A])
        print_matrix(L, "L matrix")
        print_matrix(U, "U matrix")
    except Exception as e:
        print("LU decomposition failed:", e)

    # Visualization
    if len(A) == 2:
        visualize_2x2(A, b, x1)

if __name__ == "__main__":
    main()

